{"version":3,"sources":["components/PersonForm.js","components/Person.js","components/Persons.js","services/list.js","components/FilterModule.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","submit","handleNameChange","newName","handleNumberChange","newNumber","onSubmit","onChange","value","type","Person","id","name","number","deletePerson","onClick","Persons","persons","foundPerson","searchedPerson","map","p","key","baseUrl","axios","get","then","response","data","newObject","post","put","delete","FilterModule","handlePersonSearch","App","useState","setPersons","setNewName","setNewNumber","notification","setNotification","errorMessage","setErrorMessage","setSearchedPerson","setFoundPerson","useEffect","listService","initialPersons","message","className","event","target","personResult","filter","person","toLowerCase","includes","preventDefault","personObject","some","index","findIndex","window","confirm","returnedPerson","setTimeout","refreshPersons","catch","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.861443ab.chunk.js","sourcesContent":["import React from 'react';\n\nfunction PersonForm({submit, handleNameChange, newName, handleNumberChange, newNumber}) {\n    return (\n        <div>\n            <form onSubmit={submit}>\n                <div>\n                    name: <input onChange={handleNameChange} value={newName}/>\n                    number: <input onChange={handleNumberChange} value={newNumber}/>\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default PersonForm;\n","import React from 'react';\n\nfunction Person({id, name, number, deletePerson}) {\n    return (\n        <div>\n            <p>\n                {name} {' '}\n                {number} {' '}\n                <button onClick={() => deletePerson(id, name)}>delete</button>\n            </p>\n            \n        </div>\n    )\n}\n\nexport default Person;\n","import React from 'react';\nimport Person from './Person'\n\nfunction Persons({persons, deletePerson, foundPerson, searchedPerson}) {\n    const rows = () =>\n        searchedPerson === \"\"\n        ? (persons.map(p => <Person key={p.id} id={p.id} name={p.name} number={p.number} deletePerson={deletePerson}/>)\n        ) : ( foundPerson.map(p => (<li key={p.id}> {p.name} {p.number}</li>))\n        )\n    return (\n        <div>\n            {rows()}\n        </div>\n    )\n}\n\nexport default Persons;\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);  \n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  deletePerson: deletePerson \n}","import React from \"react\";\n\nfunction FilterModule({ searchedPerson, handlePersonSearch }) {\n  return (\n    <div>\n        filter shown with: <input onChange={handlePersonSearch} value={searchedPerson}/>\n    </div> \n  )\n}\nexport default FilterModule;","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport listService from './services/list'\nimport FilterModule from './components/FilterModule'\nimport './App.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [notification, setNotification] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [searchedPerson, setSearchedPerson] = useState(\"\");\n  const [foundPerson, setFoundPerson] = useState([]);\n\n  useEffect(() => {\n    listService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const handlePersonSearch = (event) => {\n    setSearchedPerson(event.target.value);\n    const personResult = persons.filter(person =>\n      person.name.toLowerCase().includes(event.target.value.toLowerCase())\n    );\n    setFoundPerson(personResult);\n  };\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"notification\">\n        {message}\n      </div>\n    )\n  }\n\n  const Error = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  const submit = (event) => {\n    event.preventDefault();\n    const personObject = { name: newName, number: newNumber }\n    setNewName(\"\");\n    setNewNumber(\"\");\n\n    if (persons.some(p => p.name === newName) === true) {\n      let index = persons.findIndex(p => p.name === newName);\n      let id = persons[index].id;\n      let checkNameDialogue = window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`);\n      if (checkNameDialogue === true) {\n        listService\n          .update(id, personObject)\n          .then(returnedPerson => {\n            setPersons(persons.map(p => p.id !== id ? p : returnedPerson))\n          })\n        setNotification(\n          `Updated ${newName}`\n        )\n        setTimeout(() => {\n          setNotification(null)\n        }, 5000)\n      }\n    } else {\n      listService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons([...persons, returnedPerson]);\n          setNewName(\"\");\n          setNewNumber(\"\");\n        })\n      setNotification(\n        `Added ${newName}`\n      )\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000)\n    }\n\n  }\n\n  const deletePerson = (id, name) => {\n    let confirmDialogue = window.confirm(`Delete ${name}?`);\n    if (confirmDialogue === true) {\n      listService\n        .deletePerson(id)\n        .then(refreshPersons => {\n          setPersons(persons.filter(p => p.id !== id))\n          setNotification(\n            `${name} succesfully deleted`\n          )\n          setTimeout(() => {\n            setNotification(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setErrorMessage(\n            `Information of '${name}' has already been removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Error message={errorMessage} />\n      <Notification message={notification} />\n      <FilterModule handlePersonSearch={handlePersonSearch} searchedPerson={searchedPerson}/>\n      <h2>add a new contact</h2>\n      <PersonForm\n        submit={submit}\n        handleNameChange={handleNameChange}\n        newName={newName}\n        handleNumberChange={handleNumberChange}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} deletePerson={deletePerson} foundPerson={foundPerson}\n        searchedPerson={searchedPerson}/>\n\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}